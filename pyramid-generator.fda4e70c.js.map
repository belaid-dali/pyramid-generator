{"mappings":"ACAA,IAAM,UAAY,IAEZ,YAAc,SAAS,cAAc,CAAC,UACtC,YAAc,SAAS,cAAc,CAAC,gBACtC,cAAgB,SAAS,cAAc,CAAC,iBAE1C,SAAW,CAAA,EAEf,SAAS,OAAO,CAAS,CAAE,CAAQ,EAC/B,IAAM,EAAS,IAAI,MAAM,CAAC,EAAW,GAErC,OAAO,EADO,AAVA,IAUU,MAAM,CAAC,EAAE,EAAY,GACrB,CAC5B,CAEA,SAAS,gBAAgB,CAAM,EAC3B,IAAM,EAAO,EAAE,CACf,IAAK,IAAI,EAAI,EAAG,GAAK,EAAQ,IAAK,CAC9B,IAAM,EAAM,OAAO,EAAG,GAClB,SACA,EAAK,OAAO,CAAC,GAEb,EAAK,IAAI,CAAC,EAElB,CACA,OAAO,EAAK,IAAI,CAAC,KACrB,CAEA,YAAY,gBAAgB,CAAC,QAAS,KAClC,IAAM,EAAc,SAAS,YAAY,KAAK,EAC9C,GAAI,MAAM,IAAgB,EAAc,EAAG,CACvC,cAAc,WAAW,CAAG,+BAC5B,MACJ,CAEA,cAAc,WAAW,CADT,gBAAgB,EAEpC,GAIA,SAAS,gBAAgB,CAAC,mBAAoB,WAC5C,YAAY,eAAgB,CAC1B,UAAW,CACT,OAAQ,CAAE,MAAO,GAAI,QAAS,CAAE,OAAQ,CAAA,EAAM,WAAY,GAAI,CAAE,EAChE,MAAO,CAAE,MAAO,SAAU,EAC1B,MAAO,CAAE,KAAM,SAAU,OAAQ,CAAE,MAAO,EAAG,MAAO,SAAU,CAAE,EAChE,QAAS,CAAE,MAAO,GAAK,OAAQ,CAAA,EAAO,KAAM,CAAE,OAAQ,CAAA,EAAM,MAAO,EAAG,YAAa,CAAE,CAAE,EACvF,KAAM,CAAE,MAAO,EAAG,OAAQ,CAAA,EAAM,KAAM,CAAE,OAAQ,CAAA,EAAO,MAAO,EAAG,SAAU,EAAI,CAAE,EACjF,YAAa,CAAE,OAAQ,CAAA,EAAM,SAAU,IAAK,MAAO,UAAW,QAAS,GAAK,MAAO,CAAE,EACrF,KAAM,CAAE,OAAQ,CAAA,EAAM,MAAO,EAAG,UAAW,OAAQ,OAAQ,CAAA,EAAO,SAAU,CAAA,EAAO,SAAU,MAAO,OAAQ,CAAA,CAAM,CACpH,EACA,cAAe,CACb,UAAW,SACX,OAAQ,CACN,QAAS,CAAE,OAAQ,CAAA,EAAM,KAAM,SAAU,EACzC,QAAS,CAAE,OAAQ,CAAA,EAAM,KAAM,MAAO,EACtC,OAAQ,CAAA,CACV,EACA,MAAO,CACL,KAAM,CAAE,SAAU,IAAK,YAAa,CAAE,QAAS,CAAE,CAAE,EACnD,OAAQ,CAAE,SAAU,IAAK,KAAM,EAAG,SAAU,EAAG,QAAS,EAAG,MAAO,CAAE,EACpE,QAAS,CAAE,SAAU,IAAK,SAAU,EAAI,EACxC,KAAM,CAAE,aAAc,CAAE,EACxB,OAAQ,CAAE,aAAc,CAAE,CAC5B,CACF,EACA,cAAe,CAAA,CACjB,EACF","sources":["<anon>","script.js"],"sourcesContent":["const character = \"*\";\nconst heightInput = document.getElementById('height');\nconst generateBtn = document.getElementById('generatorBtn');\nconst pyramidOutput = document.getElementById('puramidOutput');\nlet inverted = false;\nfunction padRow(rowNumber, rowCount) {\n    const spaces = \" \".repeat(rowCount - rowNumber);\n    const chars = character.repeat(2 * rowNumber - 1);\n    return spaces + chars + spaces;\n}\nfunction generatePyramid(height) {\n    const rows = [];\n    for(let i = 1; i <= height; i++){\n        const row = padRow(i, height);\n        if (inverted) rows.unshift(row);\n        else rows.push(row);\n    }\n    return rows.join(\"\\n\");\n}\ngenerateBtn.addEventListener(\"click\", ()=>{\n    const heightValue = parseInt(heightInput.value);\n    if (isNaN(heightValue) || heightValue < 1) {\n        pyramidOutput.textContent = \"Please enter a valid height!\";\n        return;\n    }\n    const pyramid = generatePyramid(heightValue);\n    pyramidOutput.textContent = pyramid;\n});\n// Initialize particles.js\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    particlesJS(\"particles-js\", {\n        particles: {\n            number: {\n                value: 80,\n                density: {\n                    enable: true,\n                    value_area: 800\n                }\n            },\n            color: {\n                value: \"#ffffff\"\n            },\n            shape: {\n                type: \"circle\",\n                stroke: {\n                    width: 0,\n                    color: \"#000000\"\n                }\n            },\n            opacity: {\n                value: 0.5,\n                random: false,\n                anim: {\n                    enable: true,\n                    speed: 1,\n                    opacity_min: 0\n                }\n            },\n            size: {\n                value: 3,\n                random: true,\n                anim: {\n                    enable: false,\n                    speed: 4,\n                    size_min: 0.3\n                }\n            },\n            line_linked: {\n                enable: true,\n                distance: 150,\n                color: \"#ffffff\",\n                opacity: 0.4,\n                width: 1\n            },\n            move: {\n                enable: true,\n                speed: 6,\n                direction: \"none\",\n                random: false,\n                straight: false,\n                out_mode: \"out\",\n                bounce: false\n            }\n        },\n        interactivity: {\n            detect_on: \"canvas\",\n            events: {\n                onhover: {\n                    enable: true,\n                    mode: \"repulse\"\n                },\n                onclick: {\n                    enable: true,\n                    mode: \"push\"\n                },\n                resize: true\n            },\n            modes: {\n                grab: {\n                    distance: 400,\n                    line_linked: {\n                        opacity: 1\n                    }\n                },\n                bubble: {\n                    distance: 250,\n                    size: 0,\n                    duration: 2,\n                    opacity: 0,\n                    speed: 3\n                },\n                repulse: {\n                    distance: 400,\n                    duration: 0.4\n                },\n                push: {\n                    particles_nb: 4\n                },\n                remove: {\n                    particles_nb: 2\n                }\n            }\n        },\n        retina_detect: true\n    });\n});\n\n//# sourceMappingURL=pyramid-generator.fda4e70c.js.map\n","const character = \"*\";\n\nconst heightInput = document.getElementById('height');\nconst generateBtn = document.getElementById('generatorBtn');\nconst pyramidOutput = document.getElementById('puramidOutput');\n\nlet inverted = false;\n\nfunction padRow(rowNumber, rowCount) {\n    const spaces = \" \".repeat(rowCount - rowNumber);\n    const chars = character.repeat(2*rowNumber - 1);\n    return spaces + chars + spaces;\n}\n\nfunction generatePyramid(height) {\n    const rows = [];\n    for (let i = 1; i <= height; i++) {\n        const row = padRow(i, height);\n        if (inverted) {\n            rows.unshift(row);\n        } else {\n            rows.push(row);\n        }\n    }\n    return rows.join(\"\\n\");\n}\n\ngenerateBtn.addEventListener(\"click\", () => {\n    const heightValue = parseInt(heightInput.value);\n    if (isNaN(heightValue) || heightValue < 1) {\n        pyramidOutput.textContent = \"Please enter a valid height!\";\n        return;\n    }\n    const pyramid = generatePyramid(heightValue);\n    pyramidOutput.textContent = pyramid;\n});\n\n\n// Initialize particles.js\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n  particlesJS(\"particles-js\", {\n    particles: {\n      number: { value: 80, density: { enable: true, value_area: 800 } },\n      color: { value: \"#ffffff\" },\n      shape: { type: \"circle\", stroke: { width: 0, color: \"#000000\" } },\n      opacity: { value: 0.5, random: false, anim: { enable: true, speed: 1, opacity_min: 0 } },\n      size: { value: 3, random: true, anim: { enable: false, speed: 4, size_min: 0.3 } },\n      line_linked: { enable: true, distance: 150, color: \"#ffffff\", opacity: 0.4, width: 1 },\n      move: { enable: true, speed: 6, direction: \"none\", random: false, straight: false, out_mode: \"out\", bounce: false }\n    },\n    interactivity: {\n      detect_on: \"canvas\",\n      events: {\n        onhover: { enable: true, mode: \"repulse\" },\n        onclick: { enable: true, mode: \"push\" },\n        resize: true\n      },\n      modes: {\n        grab: { distance: 400, line_linked: { opacity: 1 } },\n        bubble: { distance: 250, size: 0, duration: 2, opacity: 0, speed: 3 },\n        repulse: { distance: 400, duration: 0.4 },\n        push: { particles_nb: 4 },\n        remove: { particles_nb: 2 }\n      }\n    },\n    retina_detect: true\n  });\n});\n"],"names":["character","heightInput","document","getElementById","generateBtn","pyramidOutput","inverted","padRow","rowNumber","rowCount","spaces","repeat","generatePyramid","height","rows","i","row","unshift","push","join","addEventListener","heightValue","parseInt","value","isNaN","textContent","particlesJS","particles","number","density","enable","value_area","color","shape","type","stroke","width","opacity","random","anim","speed","opacity_min","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","particles_nb","remove","retina_detect"],"version":3,"file":"pyramid-generator.fda4e70c.js.map"}